2025-04-16 17:05:44,704 - INFO - Sample train set 1500/67349
2025-04-16 17:05:44,705 - INFO - ... including dev set 500 samples
2025-04-16 17:05:44,705 - INFO - Loading model with FP16...
/home/rinya/anaconda3/envs/zollm/lib/python3.10/site-packages/huggingface_hub/file_download.py:797: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.
  warnings.warn(
78
2025-04-16 17:05:50,545 - INFO - Done with 5.84s
2025-04-16 17:05:50,819 - INFO - Dev samples: 500
2025-04-16 17:05:50,820 - INFO - Train samples: 1000
2025-04-16 17:05:50,820 - INFO - Eval sample length is 872
2025-04-16 17:05:50,820 - INFO - Tokenizing training samples...
2025-04-16 17:05:51,706 - INFO - Done with 0.89s
/home/rinya/anaconda3/envs/zollm/lib/python3.10/site-packages/transformers/optimization.py:391: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning
  warnings.warn(
2025-04-16 17:05:51,714 - INFO - ***** Running training *****
2025-04-16 17:05:51,714 - INFO -   Num examples = 1000
2025-04-16 17:05:51,714 - INFO -   Num Epochs = 318
2025-04-16 17:05:51,714 - INFO -   Instantaneous batch size per device = 16
2025-04-16 17:05:51,714 - INFO -   Total train batch size (w. parallel, distributed & accumulation) = 16
2025-04-16 17:05:51,714 - INFO -   Gradient Accumulation steps = 1
2025-04-16 17:05:51,714 - INFO -   Total optimization steps = 20000
2025-04-16 17:05:51,715 - INFO -   Number of trainable parameters = 1315758080
  0%|                                                                                                                                                         | 0/20000 [00:00<?, ?it/s]You're using a GPT2TokenizerFast tokenizer. Please note that with a fast tokenizer, using the `__call__` method is faster than using a method to encode the text followed by a call to the `pad` method to get a padded encoding.
### layer-wise gradient sparsity = None
-------------------------- Training Epoch 0 --------------------------
  0%|                                                                                                                                              | 1/20000 [00:08<47:04:08,  8.47s/it]

  0%|                                                                                                                                              | 2/20000 [00:17<49:51:53,  8.98s/it]

  0%|                                                                                                                                              | 3/20000 [00:27<50:52:30,  9.16s/it]
{'peak_mem': 5.889943599700928, 'step_consumption': 9372.775793075562, 'epoch': 0.05}


  0%|                                                                                                                                              | 5/20000 [00:45<51:40:12,  9.30s/it]

  0%|                                                                                                                                              | 6/20000 [00:55<51:56:50,  9.35s/it]

  0%|                                                                                                                                              | 7/20000 [01:04<51:24:39,  9.26s/it]

  0%|                                                                                                                                              | 8/20000 [01:13<50:50:39,  9.16s/it]

  0%|                                                                                                                                              | 9/20000 [01:22<50:30:39,  9.10s/it]

  0%|                                                                                                                                             | 10/20000 [01:31<50:24:45,  9.08s/it]
{'loss': 348.0897, 'learning_rate': 0.001, 'epoch': 0.16}

  0%|                                                                                                                                             | 11/20000 [01:40<50:21:34,  9.07s/it]

  0%|                                                                                                                                             | 12/20000 [01:49<50:19:39,  9.06s/it]

  0%|                                                                                                                                             | 13/20000 [01:58<50:17:16,  9.06s/it]

  0%|                                                                                                                                             | 14/20000 [02:07<50:17:08,  9.06s/it]

  0%|                                                                                                                                             | 15/20000 [02:16<50:16:03,  9.05s/it]

  0%|                                                                                                                                             | 16/20000 [02:25<50:12:29,  9.04s/it]
{'peak_mem': 5.890065670013428, 'step_consumption': 9019.138813018799, 'epoch': 0.25}


  0%|▏                                                                                                                                            | 18/20000 [02:43<50:16:04,  9.06s/it]
{'peak_mem': 6.011800289154053, 'step_consumption': 9079.091310501099, 'epoch': 0.29}


  0%|▏                                                                                                                                            | 20/20000 [03:02<50:38:34,  9.12s/it]
{'loss': 0.0, 'learning_rate': 0.001, 'epoch': 0.32}
{'peak_mem': 6.011800289154053, 'step_consumption': 9279.124975204468, 'epoch': 0.32}


  0%|▏                                                                                                                                            | 22/20000 [03:20<50:26:23,  9.09s/it]

  0%|▏                                                                                                                                            | 23/20000 [03:29<50:16:35,  9.06s/it]

  0%|▏                                                                                                                                            | 24/20000 [03:38<50:11:44,  9.05s/it]
  0%|▏                                                                                                                                            | 24/20000 [03:38<50:11:44,  9.05s/it]Traceback (most recent call last):
  File "/home/rinya/ZO-LLM-main/zo-bench/run.py", line 736, in <module>
    main()
  File "/home/rinya/ZO-LLM-main/zo-bench/run.py", line 688, in main
    framework.train(train_samples, dev_samples if dev_samples is not None else eval_samples, eval_samples)
  File "/home/rinya/ZO-LLM-main/zo-bench/run.py", line 573, in train
    trainer.train(resume_from_checkpoint=last_checkpoint)
  File "/home/rinya/anaconda3/envs/zollm/lib/python3.10/site-packages/transformers/trainer.py", line 1662, in train
    return inner_training_loop(
  File "/home/rinya/ZO-LLM-main/zo-bench/trainer.py", line 544, in _inner_training_loop
    tr_loss_step = self.zo_muon_step(model, inputs)
  File "/home/rinya/anaconda3/envs/zollm/lib/python3.10/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/home/rinya/ZO-LLM-main/zo-bench/trainer.py", line 1134, in zo_muon_step
    g_ortho = zeropower_via_newtonschulz5(g, steps=10)
  File "/home/rinya/ZO-LLM-main/zo-bench/trainer.py", line 147, in zeropower_via_newtonschulz5
    X = a * X + B @ X
KeyboardInterrupt