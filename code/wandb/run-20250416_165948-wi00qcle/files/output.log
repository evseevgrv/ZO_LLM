2025-04-16 16:59:57,719 - INFO - Sample train set 1500/67349
2025-04-16 16:59:57,719 - INFO - ... including dev set 500 samples
2025-04-16 16:59:57,720 - INFO - Loading model with FP16...
/home/rinya/anaconda3/envs/zollm/lib/python3.10/site-packages/huggingface_hub/file_download.py:797: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.
  warnings.warn(
78
2025-04-16 17:00:03,086 - INFO - Done with 5.37s
2025-04-16 17:00:03,412 - INFO - Dev samples: 500
2025-04-16 17:00:03,413 - INFO - Train samples: 1000
2025-04-16 17:00:03,413 - INFO - Eval sample length is 872
2025-04-16 17:00:03,413 - INFO - Tokenizing training samples...
2025-04-16 17:00:04,281 - INFO - Done with 0.87s
/home/rinya/anaconda3/envs/zollm/lib/python3.10/site-packages/transformers/optimization.py:391: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning
  warnings.warn(
2025-04-16 17:00:04,304 - INFO - ***** Running training *****
2025-04-16 17:00:04,304 - INFO -   Num examples = 1000
2025-04-16 17:00:04,304 - INFO -   Num Epochs = 318
2025-04-16 17:00:04,305 - INFO -   Instantaneous batch size per device = 16
2025-04-16 17:00:04,305 - INFO -   Total train batch size (w. parallel, distributed & accumulation) = 16
2025-04-16 17:00:04,305 - INFO -   Gradient Accumulation steps = 1
2025-04-16 17:00:04,305 - INFO -   Total optimization steps = 20000
2025-04-16 17:00:04,306 - INFO -   Number of trainable parameters = 1315758080
  0%|                                                                                                                                                         | 0/20000 [00:00<?, ?it/s]You're using a GPT2TokenizerFast tokenizer. Please note that with a fast tokenizer, using the `__call__` method is faster than using a method to encode the text followed by a call to the `pad` method to get a padded encoding.
### layer-wise gradient sparsity = None
-------------------------- Training Epoch 0 --------------------------
{'peak_mem': 5.386247158050537, 'step_consumption': 9573.056697845459, 'epoch': 0.02}

  0%|                                                                                                                                              | 2/20000 [00:18<52:13:58,  9.40s/it]

  0%|                                                                                                                                              | 3/20000 [00:28<51:55:44,  9.35s/it]
{'peak_mem': 5.889943599700928, 'step_consumption': 9281.052589416504, 'epoch': 0.05}


  0%|                                                                                                                                              | 5/20000 [00:46<51:48:17,  9.33s/it]

  0%|                                                                                                                                              | 6/20000 [00:56<51:56:57,  9.35s/it]
{'peak_mem': 5.889943599700928, 'step_consumption': 9401.857376098633, 'epoch': 0.1}


  0%|                                                                                                                                              | 8/20000 [01:14<50:46:31,  9.14s/it]
{'peak_mem': 5.889943599700928, 'step_consumption': 8915.726661682129, 'epoch': 0.13}


  0%|                                                                                                                                             | 10/20000 [01:32<50:14:45,  9.05s/it]
{'loss': 348.0897, 'learning_rate': 0.001, 'epoch': 0.16}

  0%|                                                                                                                                             | 11/20000 [01:41<50:09:47,  9.03s/it]

  0%|                                                                                                                                             | 12/20000 [01:50<50:09:39,  9.03s/it]
{'peak_mem': 5.890042781829834, 'step_consumption': 9030.718088150024, 'epoch': 0.19}


  0%|                                                                                                                                             | 14/20000 [02:08<50:10:26,  9.04s/it]
{'peak_mem': 5.890065670013428, 'step_consumption': 9044.904947280884, 'epoch': 0.22}


  0%|                                                                                                                                             | 16/20000 [02:26<50:08:03,  9.03s/it]
{'peak_mem': 5.890065670013428, 'step_consumption': 9013.881206512451, 'epoch': 0.25}


  0%|▏                                                                                                                                            | 18/20000 [02:44<50:14:32,  9.05s/it]
{'peak_mem': 6.011800289154053, 'step_consumption': 9081.911325454712, 'epoch': 0.29}


  0%|▏                                                                                                                                            | 20/20000 [03:02<50:15:28,  9.06s/it]
{'loss': 0.0, 'learning_rate': 0.001, 'epoch': 0.32}
{'peak_mem': 6.011800289154053, 'step_consumption': 9056.690216064453, 'epoch': 0.32}


  0%|▏                                                                                                                                            | 22/20000 [03:20<50:15:04,  9.06s/it]
{'peak_mem': 6.011800289154053, 'step_consumption': 9049.346208572388, 'epoch': 0.35}


  0%|▏                                                                                                                                            | 24/20000 [03:38<50:07:29,  9.03s/it]
{'peak_mem': 6.011800289154053, 'step_consumption': 9016.68405532837, 'epoch': 0.38}


  0%|▏                                                                                                                                            | 26/20000 [03:56<50:07:40,  9.03s/it]
{'peak_mem': 6.011800289154053, 'step_consumption': 9021.711111068726, 'epoch': 0.41}


  0%|▏                                                                                                                                            | 28/20000 [04:14<50:09:43,  9.04s/it]
{'peak_mem': 6.011800289154053, 'step_consumption': 9018.596410751343, 'epoch': 0.44}


  0%|▏                                                                                                                                            | 30/20000 [04:32<50:09:10,  9.04s/it]
{'loss': 0.0, 'learning_rate': 0.001, 'epoch': 0.48}
{'peak_mem': 6.011800289154053, 'step_consumption': 9019.232034683228, 'epoch': 0.48}


  0%|▏                                                                                                                                            | 32/20000 [04:51<50:11:56,  9.05s/it]

  0%|▏                                                                                                                                            | 33/20000 [05:00<50:16:24,  9.06s/it]
  0%|▏                                                                                                                                            | 33/20000 [05:00<50:16:24,  9.06s/it]Traceback (most recent call last):
  File "/home/rinya/ZO-LLM-main/zo-bench/run.py", line 736, in <module>
    main()
  File "/home/rinya/ZO-LLM-main/zo-bench/run.py", line 688, in main
    framework.train(train_samples, dev_samples if dev_samples is not None else eval_samples, eval_samples)
  File "/home/rinya/ZO-LLM-main/zo-bench/run.py", line 573, in train
    trainer.train(resume_from_checkpoint=last_checkpoint)
  File "/home/rinya/anaconda3/envs/zollm/lib/python3.10/site-packages/transformers/trainer.py", line 1662, in train
    return inner_training_loop(
  File "/home/rinya/ZO-LLM-main/zo-bench/trainer.py", line 544, in _inner_training_loop
    tr_loss_step = self.zo_muon_step(model, inputs)
  File "/home/rinya/anaconda3/envs/zollm/lib/python3.10/site-packages/torch/utils/_contextlib.py", line 115, in decorate_context
    return func(*args, **kwargs)
  File "/home/rinya/ZO-LLM-main/zo-bench/trainer.py", line 1137, in zo_muon_step
    grad_update_final = g_ortho.to(param.data.dtype)
KeyboardInterrupt